
##单引号 双引号 反引号 不加引号

单引号 所见所得,原样输出,强引用
双引号 输出双引号内的所有内容;如果内容中有命令(要反引号)、变量、特殊转衣服等,会先把变量、命令、转义字符解析出结果,然后再输出最终内容,推荐使用,这称为弱引用
无引号 赋值时,如果变量内容中有空格,则会造成赋值不完整,最好用双引号替代无引号,特别时对变量赋值时
反引号 ``相当于$(),赋值和输出都要用``将命令引起来
\r回车 \n换行

一般的变量定义 赋值 常用双引号;
命令解析结果`` $()
打印输出或使用变量时,变量名前要接$ ;打印输出时变量名后面紧接其他字符时${};


a=a123456
echo ${变量名:开始位置:长度} #注意,起始位置从 0 开始,截取之后的3位
echo ${a:2:3}   #输出234

expr substr $变量名 #注意,起始位置从 1 开始,截取之后的3位
expr substr $a 2 3   #输出123

cut -b 开始位置-结束位置 #注意,起始位置从 1 开始
echo $a | cut -b 2-3 #输出12

cut -b：仅显示行中指定直接范围的内容；
cut -f2,3：显示指定字段的内容；  cut -f2 --complement 打印除了第二列之外的列; 
cut -d : -f 1 /etc/passwd //以冒号分隔截取第一列

p=abcABC123ABCabc
echo ${p##a*c}  结果为空
echo ${p##a*C}  结果为abc
echo ${p%a*C} 结果为abcABC123ABCabc 从结尾删除最短匹配
echo ${p%a*c} 结果abcABC123ABC 

a="i am oldboy,yes,oldboy"
echo ${a//oldboy/oldgirl} #替换所有匹配的oldboy的字符
echo ${a/oldboy/oldgirl} #替换第一个oldboy的字符

command > 文件 2>文件
command > 文件 2>&1
command &> 文件

tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 8 生成随机密码
head -c n 显示文件的前n个字节

一个"/"标识替换匹配的第一个字符
两个"/"标识替换匹配的所有字符串
f=stu_102999_1_finished.jpg
echo ${f//_finished/} 输出为stu_102999_1.jpg
mv $f `echo ${f//_finished/}` stu_1029999_1.jpg

-e filename 如果 filename存在，则为真
-d filename 如果 filename为目录，则为真 
-f filename 如果 filename为常规文件，则为真
-L filename 如果 filename为符号链接，则为真
-r filename 如果 filename可读，则为真 
-w filename 如果 filename可写，则为真 
-x filename 如果 filename可执行，则为真
-s filename 如果文件长度不为0，则为真
-h filename 如果文件是软链接，则为真
filename1 -nt filename2 如果 filename1比 filename2新，则为真。
filename1 -ot filename2 如果 filename1比 filename2旧，则为真。
-eq 等于
-ne 不等于
-gt 大于
-ge 大于等于
-lt 小于
-le 小于等于
！号 取非
-a是and，左右条件两者都成立
-o是or，左右条件任意一条成立

######
判断是否存在这个值
var=$1
abc(){
   echo "abc"
}
abb(){
   echo "abb"
}
list_name="abc abb"   ###定义list
if [[ "$list_name" =~ "$var" ]]
then
    ${var}
fi
########

#!/bin/bash
useradd $1
echo $2 |passwd --stdin $1


#!/bin/bash
read -p "请输入用户名" u
useradd $u
stty -echo
read -p "请输入密码" p
stty echo
echo $p |passwd --stdin $u

                                  
#!/bin/bash
n=`who | wc -l`
[ $n -gt 3 ] && echo "123456" |mail -s 'test' root
~                                                       

#!/bin/bash
ping -c 3 -i 0.2 -W -l $ &> /dev/null
if [ $? -eq 0 ];then
        echo "pass"
else
        echo "fail"
fi


#!/bin/bash
x=$[RANDOM%10]
read -p "请输入一个数字(0-9)" n
if [ $x -eq $n ];then
        echo "猜对了"
elif [ $x -lt $n ];then
        echo "猜大了"
else
        echo "猜小了"
fi


#!/bin/bash
for i in {1..10}
do
        echo $i
done

#!/bin/bash
x=0
y=0
for i in {1..15}
do
	ping -c 3 -i 0.2 -W 1 172.25.0.$i &> /dev/null
	if [ $? -eq 0 ];then
		echo "172.25.0.$i通了"
		let x++
	else
		echo "172.25.0.$i不通"
		let y++
	fi
done
echo "$x台通了,$y台不通"     


#!/bin/bash
case $1 in
t|T|tt|TT)
        touch $2 ;;
m|M)
        mkdir $2 ;;
r)
        rm -rf $2 ;;
*)
        echo "t|m|r"
esac   




#!/bin/bash
case $1 in
on)
        netstat -ntulp | grep -q nginx
        [ $? -eq 0 ] && echo "服务已开启" && exit
        /usr/local/nginx/sbin/nginx ;;
off)
        /usr/local/nginx/sbin/nginx -s stop ;;
st)
        netstat -ntulp | grep -q nginx
        [ $? -eq 0 ] && echo "服务开启" || echo "服务未开启" ;;
*)
        echo "on | off"
esac



#!/bin/bash
x=0
while :
do
read -p "请输入数字(0是结束0)" n
[ $n -eq 0 ] && break
let x+=n
done
echo "一共是$x"


 找出1~20以内6的倍数，并输出她的平方值

#!/bin/bash
for i in {1..20}
do
	x=$[i%6]
	[ $x -eq 0 ]  ||  continue
	echo $[i*i]
done


#!/bin/bash
u=`awk -F: '/bash$/{print $1}' /etc/passwd`
for i in $u
do
        grep ^$i /etc/shadow | awk -F: '{print $1"-->"$2}'
done


#!/bin/bash
u=`awk -F: '/bash$/{print $1}' /etc/passwd`
for i in $u
do
        awk -F: '/'^$i:'/{print $1"-->"$2}' /etc/shadow
done

############
配置ip脚本

#!/bin/bash
while :
do
uptime | awk '{print "cup负载情况"$8,$9,$10}'
ifconfig eth0 | awk '/RX p/{print "主机eth0网卡的接收流量是"$5"字节"}'
ifconfig eth0 | awk '/TX p/{print "主机eth0网卡的发送流量是"$5"字节"}'
df -h | awk '/vda1/{print "根分区"$4}'
uptime | awk '{print "当前登录人数"$4}'
free -m | awk '/Mem:/{print "内存剩余"$4"mb"}'
awk 'END{print "计算机用户数量是"NR"个"}' /etc/passwd
p=`ps aux | wc -l`
echo '当前进程数'$p
m=`rpm -qa | wc -l`
echo "本机已经安装软件包数量是"$m"个"
sleep 5
clear
done


#!/bin/bash
x=`awk '/Failed/{ip[$11]++}END{for(i in ip){print ip[i]","i}}' /var/log/secure`
for l in $x
do
        m=`echo $l | cut -d , -f 1`
        n=`echo $l | cut -d , -f 2`
        [ $m -gt 3 ] && echo "$n登录次数超过$m次" | mail -s test root
done



#!/bin/bash
confip(){
ip1=$(echo $ip | awk -F "." '{print $1}')
ip2=$(echo $ip | awk -F "." '{print $2}')
ip3=$(echo $ip | awk -F "." '{print $3}')
eip=${ip1}.${ip2}.${ip3}.254
sip=$(grep baseurl /etc/yum.repos.d/local.repo | awk -F "/" '{print $3}') &> /dev/null
sed  -i "/baseurl/s/${sip}/${eip}/" /etc/yum.repos.d/local.repo
}
network(){
if [ -z $gw ];then
 nmcli connection modify $name ipv4.method manual ipv4.addresses $ip connection.autoconnect yes &> /dev/null
 if [ $? -ne 0 ];then
  echo 'Network Address Error'
 fi
 nmcli connection up $name
 confip
else
 nmcli connection modify $name ipv4.method manual ipv4.addresses $ip ipv4.gateway $gw connection.autoconnect yes &> /dev/null
 if [ $? -ne 0 ];then
  echo 'Network Address Error'
 fi
 nmcli connection up $name
 confip
fi
}
read  -p  'Network name(eth0/eth1/eth2/eth3):'  name
read  -p  'Set IP(IP/24):'  ip
read  -p  'Set Gateway(default none):'  gw
if [ -z $name ] || [ -z $ip ];then
 echo -e "\e[31;1mPlease enter parameters\e[0m"
 exit
fi
echo $ip | grep /24
###############################################################
~].() {
>.|.
>}
>.
##################

~]# vim /usr/local/nginx/logbak.sh
#!/bin/bash
date=`date +%Y%m%d`
logpath=/usr/local/nginx/logs
mv $logpath/access.log $logpath/access-$date.log
mv $logpath/error.log $logpath/error-$date.log
kill -USR1 $(cat $logpath/nginx.pid)
###################

for ((i=51,j=61;i<57 && j<67;i++,j++)); do ssh root@192.168.4.$i "sed -i '93c port 63$j' /etc/redis/6379.conf"; done //定义变量

############
#定义一个函数,ping 某一台主机,并检测主机的存活状态
myping(){
ping -c2 -i0.3 -W1 $1 &>/dev/null
if
[ $? -eq 0 ];then
echo "$1 is up"
else
echo "$1 is down"
fi
}for
i in
{1..254}
do
myping 192.168.4.$i &
done
###############
for i in {51..59};do ssh root@192.168.4.$i "hostnamectl set-hostname host$i";done



